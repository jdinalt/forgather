-- extends 'models/causal_lm/custom.yaml'

-- block model_meta_config
    == super()
    -- set ns.model_name = "Dynamic Causal Languange Model"
    ## Used to name the generated model file and to set the HF model type.
    -- set ns.model_short_name = "dynamic_causal_lm"
    ## Where to search for model source templates.
    -- set ns.model_template_searchpath = joinpath(ns.forgather_dir, 'modelsrc', 'templates')
    ## The name of the model source template to use
    -- set ns.model_template_name = 'hf_causal.py'
    -- set ns.model_description = "This model's implemetation modules can be swapped out entirely through the configuraiton."
    -- set ns.model_cls = 'DynamicCasualLM'
    -- set ns.model_cfg_cls = 'DynamicCausalLMConfig'
    ## path to file containing configuration class; be default, we assume they are the same.
    ## Code generation naming policy:
    ##   "required" : Only assign names to objects when they show up in more than on place in the graph.
    ##     This results in the most compact representation.
    ##   "named" : Assign names when required or if the object has been named in the definition.
    ##   "all" : Assign names to all objects; generate automatic names, when not specified.
    ##     This results in a very flat structure, but the hierarchy may not be readily apparent
    ##     and the is very verbose.
    -- set ns.model_name_policy = "named"
-- endblock model_meta_config


-- block model_globals
    -- set ns.model_config_path = joinpath(ns.output_dir, ns.model_short_name + ".py")
    -- set ns.model_path = ns.model_config_path
    -- set ns.model_type = "forgather-dynamic-causal-" + ns.model_short_name
    -- set ns.model_bits_dir = joinpath(ns.forgather_dir, 'modelsrc', 'transformer')
<< endblock model_globals


-- block model_header
    == super()
# ns.model_short_name = "{{ ns.model_short_name }}"
# ns.model_type = "{{ ns.model_type }}"
# ns.model_config_path = "{{ ns.model_config_path }}"
# ns.model_template_searchpath = "{{ abspath(ns.model_template_searchpath) }}"
# ns.model_template_name = "{{ ns.model_template_name }}"
# ns.model_name_policy = "{{ ns.model_name_policy }}"
<< endblock model_header


## Note reversed order of super(), as we want to search from specific to general
-- block model_submodule_searchpath
    - "{{ ns.model_bits_dir }}"
    == super()
<< endblock model_submodule_searchpath


-- block model_bits required
## .define: &model_factory !singleton:.dynamic_causal_transformer:CasualLM@model_factory
<< endblock model_bits


-- block model_code_generator
model_code_generator: &model_code_generator !meta:forgather.codegen:generate_code@model_code_generator
    searchpath: "{{ ns.model_template_searchpath }}"
    template_name: "{{ ns.model_template_name }}"
    name_policy: "{{ ns.model_name_policy }}"
    obj: *model_factory
    # Template args
    model_type: "{{ ns.model_type }}"
<< endblock model_code_generator


-- block model_code_writer
model_code_writer: &model_code_writer !singleton:forgather.ml.construct:write_file@model_code_writer
    data: *model_code_generator
    output_file: "{{ ns.model_config_path }}"
    return_value: "Model constructor generated by Forgather 1.0"
<< endblock model_code_writer


-- block model_config
    == super()
    # Add dependency on code generator
    code_generator: *model_code_writer
<< endblock model_config

