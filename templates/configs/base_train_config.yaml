## This template defines a rough outline for training configurations to follow
## The details should be filled in via a "child" template
-- set ns = namespace()
-- from 'inc/formatting.jinja' import h1, h2
-- filter trim()

-- block experiment_metadata
    -- set ns.EXPERIMENT_NAME = "Anonymous Experiment"
    -- set ns.EXPERIMENT_DESCRIPTION = "Undefined"
    -- set ns.MODEL_NAME = "anonymous_model"
-- endblock experiment_metadata


-- block base_directories required
    ## Define these directories in your project ###
    ## The relative locations of the project and assests from CWD
    ## -- set ns.ASSETS_DIR = path_join('..', '..')
    ## -- set ns.PROJECT_DIR = '.'
    ##
    ## The locations of your project templates
    ## -- set ns.PROJ_TEMPLATES_DIR = path_join(ns.PROJECT_DIR, 'templates')
    ##
    ## The location of the main templates library
    ## set ns.TEMPLATES_DIR = path_join(ns.ASSETS_DIR, 'templates')
    ##
    ## Where are training scripts stored?
    ##-- set ns.SCRIPTS_DIR = path_join(ns.ASSETS_DIR, 'scripts')
    ##
    ## **************************************************
    ## The following are REQUIRED by the templates.
    ## Where are models to be stored?
    ## -- set ns.MODELS_DIR = path_join(ns.PROJECT_DIR, 'output_models')
    ##
    ## Where are tokenizers to be stored?
    ## -- set ns.TOKENIZERS_DIR = path_join(ns.ASSETS_DIR, 'tokenizers')
    ##
    ## Where are datasets to be stored?
    ## -- set ns.DATASETS_DIR = path_join(ns.ASSETS_DIR, 'datasets')
    ##
    ## Where is model source code stored?
    ##-- set ns.MODEL_SOURCE_DIR = path_join(ns.ASSETS_DIR, 'model_zoo')
-- endblock base_directories


-- block train_directories
    -- set ns.OUTPUT_DIR = path_join(ns.MODELS_DIR, ns.MODEL_NAME)
    -- set ns.LOGGING_DIR = path_join(ns.OUTPUT_DIR, "runs", ns.EXPERIMENT_NAME + '_' + time_ns)
-- endblock train_directories

################################
## Begin Template Output
################################
-- endfilter ## filter trim() setup
== h1(ns.EXPERIMENT_NAME)
-- filter trim()
-- block header
# {{ utcnow }}
# Description: {{ ns.EXPERIMENT_DESCRIPTION }}
# Model: {{ ns.MODEL_NAME }}
# World Size: {{ world_size }}
# Hostname: {{ hostname }}
# Script Args: {{ script_args }}
# Versions:
-- for key, value in versions.items()
    == '#     ' + key + ': ' + value
-- endfor
<< endblock header
-- endfilter


== h2('Config Vars')

-- filter trim()
-- block variable_listing
# ns.TOKENIZERS_DIR: "{{ ns.TOKENIZERS_DIR }}"
# ns.MODELS_DIR: "{{ ns.MODELS_DIR }}"
# ns.DATASETS_DIR: "{{ ns.DATASETS_DIR }}"
# ns.SCRIPTS_DIR: "{{ ns.SCRIPTS_DIR }}"
# ns.MODEL_SOURCE_DIR: "{{ ns.MODEL_SOURCE_DIR }}"
# ns.OUTPUT_DIR: "{{ ns.OUTPUT_DIR }}"
<< endblock variable_listing
-- endfilter


== h2('Dependencies')

-- filter trim()
-- block pre_model_setup
# Undefined
-- endblock pre_model_setup
-- endfilter


== h2('Model')

-- filter trim()
-- block model_definition required
## Undefined
-- endblock model_definition
-- endfilter


== h2('Datasets')

-- filter trim()
-- block dataset_definition required
## Undefined
<< endblock dataset_definition
-- endfilter


== h2('Trainer Callbacks')

-- block trainer_callbacks
.define: &trainer_callbacks []
-- endblock trainer_callbacks


== h2('Data Collator')

-- filter trim()
-- block datacollator
.define: &data_collator null
<< endblock datacollator
-- endfilter


== h2('Trainer')

-- filter trim()
-- block trainer_definition required
## Undefined
<< endblock trainer_definition
-- endfilter


== h2('Pre Config')

-- filter trim()
-- block pre_config
# Undefined
-- endblock pre_config
-- endfilter


== h1('Configuration Output')
-- filter trim()
-- block output_configuration required
## Undefined
-- endblock output_configuration
-- endfilter


== h2('Post Config')

-- block trailer
# Undefined
-- endblock trailer