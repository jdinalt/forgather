-- extends 'types/type.yaml'
-- from 'inc/formatting.jinja' import h2


-- block config_metadata
    ## This block introduces new settings and defines defautls.
    -- set ns.log_name = "log"
    -- set ns.model_name = "default_model"
    -- set ns.create_new_model = True
    -- set ns.save_model = True
    -- set ns.train = True
    -- set ns.eval = False
-- endblock config_metadata


-- block globals
    ## Compute directories from above blocks.
    -- set ns.output_dir = joinpath(ns.models_dir, ns.model_name)
    -- set ns.logging_dir = joinpath(ns.output_dir, "runs", ns.log_name + '_' + filetime())
-- endblock globals


-- block header
    == super()
# Model: {{ ns.model_name }}
# Hostname: {{ hostname }}
# Versions:
-- for key, value in versions.items()
    == '#     ' + key + ': ' + value
-- endfor
<< endblock header


-- block variable_listing
    == super()
# ns.model_src_dir: "{{ ns.model_src_dir }}"
# ns.output_dir: "{{ ns.output_dir }}"
# ns.logging_dir: "{{ ns.logging_dir }}"
# ns.create_new_model: {{ ns.create_new_model }}
# ns.save_model: {{ ns.save_model }}
# ns.train: {{ ns.train }}
# ns.eval: {{ ns.eval }}
<< endblock variable_listing


-- block main_body

== h2('Distributed Environment')

    -- filter trim()
    -- block distributed_environment
.define: &distributed_env !singleton:forgather.ml.distributed:DistributedEnvironment@distributed_env
    << endblock distributed_environment
    -- endfilter


== h2('Dependencies')

    -- filter trim()
    -- block pre_model_setup
## Undefined
    -- endblock pre_model_setup
    -- endfilter


== h2('Model')

    -- filter trim()
    -- block model_constructor_args
.define: &model_constructor_args {}
    -- endblock model_constructor_args
    -- endfilter


    -- filter trim()
    -- block model_definition required
## .define: &tokenizer
## .define: &model
    -- endblock model_definition
    -- endfilter


== h2('Datasets')

    -- filter trim()
    -- block datasets_definition required
## .define: &train_dataset
## .define: &eval_dataset
    << endblock datasets_definition
    -- endfilter


== h2('Data Collator')

    -- filter trim()
    -- block datacollator
.define: &data_collator null
    << endblock datacollator
    -- endfilter


== h2('Trainer Callbacks')

    -- filter trim()
    -- block trainer_callbacks
.define: &trainer_callbacks []
    << endblock trainer_callbacks
    -- endfilter


== h2('Trainer')

    -- filter trim()
    -- block trainer_definition required
## .define: &trainer
    << endblock trainer_definition
    -- endfilter
<< endblock main_body


-- block meta_output
    == super()
    output_dir: "{{ ns.output_dir }}"
    model_src_dir: "{{ ns.model_src_dir }}"
    logging_dir: "{{ns.logging_dir}}"
    create_new_model: "{{ns.create_new_model}}"
    save_model: "{{ns.save_model}}"
    train: "{{ns.train}}"
    eval: "{{ns.eval}}"
<< endblock meta_output


-- block main_output
main: !singleton:forgather.ml.training_script:TrainingScript@training_script
    meta: *meta_output
    do_save: {{ ns.save_model }}
    do_train: {{ ns.train }}
    do_eval: {{ ns.eval }}
    # Init distributed envrionment before initializing anyting which depends on it.
    distributed_env: *distributed_env
    trainer: *trainer
<< endblock main_output