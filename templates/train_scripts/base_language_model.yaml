## This template defines a rough outline for training configurations to follow
## The details should be filled in via a "child" template
-- set ns = namespace()
-- from 'inc/formatting.jinja' import h1, h2, h3
-- filter trim()

-- block experiment_metadata
    -- set ns.EXPERIMENT_NAME = "Undefined"
    -- set ns.LOG_NAME = "log"
    -- set ns.EXPERIMENT_DESCRIPTION = "Undefined"
    -- set ns.MODEL_NAME = "default_model"
    -- set ns.CREATE_NEW_MODEL = True
    -- set ns.SAVE_MODEL = True
    -- set ns.TRAIN = True
    -- set ns.EVAL = False
-- endblock experiment_metadata


-- block base_directories required
    ## -- set ns.PROJECT_DIR
    ## -- set ns.MODEL_ZOO_DIR
    ## -- set ns.MODELS_DIR
    ## -- set ns.TOKENIZERS_DIR
    ## -- set ns.DATASETS_DIR
-- endblock base_directories


-- block train_directories
    -- set ns.OUTPUT_DIR = path_join(ns.MODELS_DIR, ns.MODEL_NAME)
    -- set ns.LOGGING_DIR = path_join(ns.OUTPUT_DIR, "runs", ns.LOG_NAME + '_' + time_ns())
-- endblock train_directories

################################
## Begin Template Output
################################
-- endfilter ## filter trim() setup
== h1(ns.EXPERIMENT_NAME)
-- filter trim()
-- block header
# {{ utcnow() }}
# Description: {{ ns.EXPERIMENT_DESCRIPTION }}
# Model: {{ ns.MODEL_NAME }}
# Hostname: {{ hostname }}
# Versions:
-- for key, value in versions.items()
    == '#     ' + key + ': ' + value
-- endfor
<< endblock header
-- endfilter


== h2('Config Vars')

-- filter trim()
-- block variable_listing
# ns.PROJECT_DIR: "{{ ns.PROJECT_DIR }}"
# ns.MODELS_DIR: "{{ ns.MODELS_DIR }}"
# ns.TOKENIZERS_DIR: "{{ ns.TOKENIZERS_DIR }}"
# ns.DATASETS_DIR: "{{ ns.DATASETS_DIR }}"
# ns.OUTPUT_DIR: "{{ ns.OUTPUT_DIR }}"
# ns.LOGGING_DIR: "{{ ns.LOGGING_DIR }}"
# ns.CREATE_NEW_MODEL: {{ ns.CREATE_NEW_MODEL }}
# ns.SAVE_MODEL: {{ ns.SAVE_MODEL }}
# ns.TRAIN: {{ ns.TRAIN }}
# ns.EVAL: {{ ns.EVAL }}
<< endblock variable_listing
-- endfilter


== h2('Distributed Environment')

-- filter trim()
-- block distributed_environment
.define: &distributed_env !callable:aiws.distributed:DistributedEnvironment
<< endblock distributed_environment
-- endfilter


== h2('Dependencies')

-- filter trim()
-- block pre_model_setup
## Undefined
-- endblock pre_model_setup
-- endfilter


== h2('Model')

-- filter trim()
-- block model_constructor_args
## .define: &model_constructor_args
-- endblock model_constructor_args
-- endfilter


-- filter trim()
-- block model_definition required
## .define: &tokenizer
## .define: &model
-- endblock model_definition
-- endfilter


== h2('Datasets')

-- filter trim()
-- block datasets_definition required
## .define: &train_dataset
## .define: &eval_dataset
<< endblock datasets_definition
-- endfilter


== h2('Data Collator')

-- filter trim()
-- block datacollator
.define: &data_collator null
<< endblock datacollator
-- endfilter


== h2('Trainer Callbacks')

-- block trainer_callbacks
.define: &trainer_callbacks []
-- endblock trainer_callbacks


== h2('Trainer')

-- filter trim()
-- block trainer_definition required
## .define: &trainer
<< endblock trainer_definition
-- endfilter


== h1('Configuration Output')
-- filter trim()
-- block output_configuration
    -- filter trim()
    -- block config_meta
meta: &meta
    experiment_name: "{{ ns.EXPERIMENT_NAME }}"
    experiment_description: "{{ ns.EXPERIMENT_DESCRIPTION }}"
    project_dir: "{{ ns.PROJECT_DIR }}"
    models_dir: "{{ ns.MODELS_DIR }}"
    tokenizers_dir: "{{ ns.TOKENIZERS_DIR }}"
    datasets_dir: "{{ ns.DATASETS_DIR }}"
    model_zoo_dir: "{{ ns.MODEL_ZOO_DIR }}"
    output_dir: "{{ ns.OUTPUT_DIR }}"
    logging_dir: "{{ns.LOGGING_DIR}}"
    << endblock config_meta
    -- endfilter

    -- filter trim()
    -- block training_script
main: !callable:aiws.training_script:TrainingScript
    meta: *meta
    do_save: {{ ns.SAVE_MODEL }}
    do_train: {{ ns.TRAIN }}
    do_eval: {{ ns.EVAL }}
    distributed_env: *distributed_env
    trainer: *trainer
    << endblock training_script
    -- endfilter
<< endblock output_configuration
-- endfilter