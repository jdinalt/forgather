-- extends 'models/abstract/base_language_model.yaml'

-- block model_meta_config
    == super()
    -- set model_def.name = "Custom Language Model"
    -- set model_def.description = "A custom model definition."
    ## Define the following variables
##  -- set model_def.cls = '<model class>'
##  -- set model_def.cfg_cls = '<model configuration class>'
##  -- set model_def.config_path = '<path to model config source>'
##  -- set model_def.model_path = '<path to model source>'
<< endblock model_meta_config


-- block model_header
    == super()
# model_def.cls = "{{ model_def.cls }}"
# model_def.cfg_cls = "{{ model_def.cfg_cls }}"
# model_def.config_path = "{{ model_def.config_path }}"
# model_def.model_path = "{{ model_def.model_path }}"
<< endblock model_header


##-- block model_tokenizer
##.define: &tokenizer !callable:transformers:AutoTokenizer.from_pretrained
##    - "tokenizer_path_or_id"
##<< endblock model_tokenizer


-- block model_config
.define: &model_config
    # Set auto-map for custom model; this ensures that the source code stays with the model.
    auto_map:
        AutoConfig: "{{ modname_from_path(model_def.config_path) + '.' + model_def.cfg_cls }}"
        AutoModel: "{{ modname_from_path(model_def.model_path) + '.' + model_def.cls }}"
    # Get the vocab-size from the tokenizer definition.
    vocab_size: !callable:forgather.construct:length [ *tokenizer ]
    pad_token_id: !callable:forgather.construct:get_attr [ *tokenizer, 'pad_token_id' ]
    bos_token_id: !callable:forgather.construct:get_attr [ *tokenizer, 'bos_token_id' ]
    eos_token_id: !callable:forgather.construct:get_attr [ *tokenizer, 'eos_token_id' ]
<< endblock model_config


-- block model_submodule_searchpath
# Model is entirely self-contained; no sub-modules.
.define: &model_submodule_searchpath []
-- endblock model_submodule_searchpath


-- block model_constructor
# Custom transformer model; registers for AutoClass and will save code with weights.
.define: &model !callable:aiws.construct:copy_package_files
    # Source files will be copied to model directory.
    - "{{ ns.output_dir }}"
    # Construct model from configuration.
    - !callable:{{ model_def.model_path }}:{{ model_def.cls }}
        args:
            - !callable:aiws.construct:copy_package_files
                # Source files will be copied to model directory.
                - "{{ ns.output_dir }}"
                # Construct configuration from config-args.
                - !callable:{{ model_def.config_path }}:{{ model_def.cfg_cls }}
                    submodule_searchpath: *model_submodule_searchpath
                    <<: *model_config
        kwargs:
            submodule_searchpath: *model_submodule_searchpath
            # Constructor args specify things like flash-attention.
            <<: *model_constructor_args
<< endblock model_constructor