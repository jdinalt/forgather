-- extends 'models/abstract/dynamic_causal_lm.yaml'

-- block model_meta_config
    == super()
    -- set model_def.name = "Dynamic Causal Transformer"
    -- set model_def.description = "A vanilla causal transformer model."
-- endblock model_meta_config


-- block model_tokenizer
    ## Default tokenizer
    -- include 'tokenizers/tiny_8k.yaml'
<< endblock model_tokenizer


## These are all modular 'bits' which all can be swapped out with other
## modules through the configuration, provided they share a compatible
## interface with the other modules.
##
## This effectively makes the implementation of each component a
## configurable model parameter.
##
## The default arguments are intended closely mirror the original 
## transformer archetecture, Attention is All You Need, obviously
## excepting this being a causal LM.
-- block model_bits
    -- block loss_fn_factory
.define: &loss_fn_factory !factory:.causal_loss:CausalLoss@loss_fn_factory []
    << endblock loss_fn_factory


    -- block layer_norm_factory
.define: &layer_norm_factory !factory:torch.nn:LayerNorm@layer_norm_factory
    normalized_shape: !var "hidden_size"
    << endblock layer_norm_factory


    -- block feedforward_factory
.define: &feedforward_factory !factory:.feedforward_layer:FeedforwardLayer@feedforward_factory
    d_model: !var "hidden_size"
    d_feedforward: !var "dim_feedforward"
    dropout: !var "activation_dropout"
    << endblock feedforward_factory


    -- block attention_factory
.define: &attention_factory !factory:.causal_multihead_attn:CausalMultiheadAttn@attention_factory
    d_model: !var "hidden_size"
    num_heads: !var "num_attention_heads"
    dropout: !var "attention_dropout"
    << endblock attention_factory


    -- block layer_factory
.define: &layer_factory !lambda:.post_ln_layer:PostLNLayer@layer_factory
    feedforward: *feedforward_factory
    attention: *attention_factory
    norm1: *layer_norm_factory
    norm2: *layer_norm_factory
    dropout: !var "layer_dropout"
    residual_dropout: !var "residual_dropout"
    << endblock layer_factory


    -- block layer_stack_factory
.define: &layer_stack_factory !factory:.layer_stack:LayerStack@layer_stack_factory
    layer_factory: *layer_factory
    num_hidden_layers: !var "num_hidden_layers"
    << endblock layer_stack_factory


    -- block output_decoder_factory
.define: &output_decoder_factory !factory:torch.nn:Linear@output_decoder_factory
    - !var "hidden_size"
    - !var "vocab_size"
    << endblock output_decoder_factory


    -- block positional_encoder_factory
.define: &positional_encoder_factory !factory:.sinusoidal_pe:SinusoidalPE@positional_encoder_factory
    d_model: !var "hidden_size"
    max_sequence_length: !var "max_sequence_length"
    << endblock positional_encoder_factory


    -- block input_encoder_factory
.define: &input_encoder_factory !factory:.input_encoder:InputEncoder@input_encoder_factory
    d_model: !var "hidden_size"
    vocab_size: !var "vocab_size"
    dropout: !var "embedding_dropout"
    positional_encoder: *positional_encoder_factory
    << endblock input_encoder_factory


    -- block init_weights_factory
.define: &init_weights_factory !factory:.init_weights:InitWeights@init_weights_factory
    std: !var "initializer_range"
    << endblock init_weights_factory


    -- block model_factory
.define: &model_factory !singleton:.causal_lm:CasualLM@model_factory
    loss_fn: *loss_fn_factory
    input_encoder: *input_encoder_factory
    output_decoder: *output_decoder_factory
    layer_stack: *layer_stack_factory
    init_weights: *init_weights_factory
    << endblock model_factory
<< endblock model_bits


-- block model_config
    == super()
    hidden_size: 512
    num_attention_heads: 8
    num_hidden_layers: 6
    max_sequence_length: !singleton:getattr
        - *tokenizer
        - "model_max_length"
    dim_feedforward: 2048
    initializer_range: 0.02
    embedding_dropout: 0.10
    layer_dropout: 0.10
    residual_dropout: 0.0
    attention_dropout: 0.0
    activation_dropout: 0.0
<< endblock model_config
