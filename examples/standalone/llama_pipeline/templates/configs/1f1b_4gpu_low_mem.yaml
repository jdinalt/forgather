## Minimizes GPU Memory Usage
## While not fast, this configuration enables maximal memory savings.
## - 1f1b scheduler
## - Activation Checkpointing
## - Activation CPU Offloading
## - Fusing the optimizer step with backwards
-- extends 'project.yaml'

-- block config_metadata
    == super()
    -- set ns.config_name = "1F1B with 4 GPUs"
    -- set ns.config_description = "Pipeline with 4 GPUs"
    -- set ns.log_name = "1f1b_4gpu"
    -- set ns.nproc_per_node = 4
-- endblock config_metadata

-- block trainer_definition
    -- include 'experiment.trainer_config'
-- endblock trainer_definition

#-------------------- experiment.trainer_config --------------------
-- extends 'project.trainer_config'


-- block trainer_meta_config
    == super()
    -- set trainer_def.pipeline_segments = 4
    -- set trainer_def.pipeline_microbatches = 8
-- endblock trainer_meta_config


-- block trainer_args
    == super()

    # Experiment Overrides
    fuse_optim_with_backward: True
    enable_activation_offloading: True
    max_grad_norm: null
    enable_activation_checkpoints: True
-- endblock trainer_args


-- block trainer_constructor
    == super()
    
    # Experiment Overrides
    pipe_schedule_factory: !lambda:torch.distributed.pipelining:Schedule1F1B
-- endblock trainer_constructor

## Try manual setting to ballance memory usage...
-- block split_spec
split_spec: &split_spec !dict@split_spec
    causal_lm.layer_stack.layers.6: "beginning"
    causal_lm.layer_stack.layers.13: "beginning"
    causal_lm.layer_stack.layers.22: "beginning"
-- endblock split_spec